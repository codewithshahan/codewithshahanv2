"use client";

import React, { useState, useEffect, useRef, useCallback } from "react";
import {
  motion,
  useAnimation,
  useScroll,
  AnimatePresence,
} from "framer-motion";
import {
  ArrowRight,
  Check,
  X,
  ShoppingCart,
  BookOpen,
  Code,
  ChevronUp,
  ExternalLink,
} from "lucide-react";
import Link from "next/link";
import Image from "next/image";
import { STORE } from "@/lib/routes";
import { useTheme } from "next-themes";
import { useRouter } from "next/navigation";

// Add sound effect imports
import { useSound } from "use-sound";

// Define MobileLayout component
const MobileLayout = () => {
  const { resolvedTheme } = useTheme();
  const isDark = resolvedTheme === "dark";
  const bookControls = useAnimation();
  const containerControls = useAnimation();
  const particlesControls = useAnimation();
  const contentControls = useAnimation();
  const statItemControls = useAnimation();

  // Enhanced 3D breathing animation for mobile book
  useEffect(() => {
    // Deep breathing animation for mobile book
    bookControls.start({
      scale: [1, 1.07, 1.04, 0.99, 1.02, 1],
      y: [0, -10, -5, -2, -6, 0],
      rotateY: [0, 9, 4.5, 1.5, 5, 0],
      rotateX: [0, 2.5, 1.3, 0.4, 1.6, 0],
      filter: [
        "drop-shadow(0 15px 15px rgba(0,0,0,0.2))",
        "drop-shadow(0 40px 30px rgba(0,0,0,0.4))",
        "drop-shadow(0 25px 25px rgba(0,0,0,0.3))",
        "drop-shadow(0 15px 15px rgba(0,0,0,0.25))",
        "drop-shadow(0 25px 20px rgba(0,0,0,0.28))",
        "drop-shadow(0 15px 15px rgba(0,0,0,0.2))",
      ],
      transition: {
        duration: 10,
        ease: "easeInOut",
        repeat: Infinity,
        repeatType: "loop",
        times: [0, 0.2, 0.4, 0.6, 0.8, 1],
      },
    });

    // Ambient particles animation
    particlesControls.start({
      opacity: [0.5, 0.8, 0.5],
      scale: [1, 1.1, 1],
      rotate: [0, 10, 0],
      transition: {
        duration: 12,
        ease: "easeInOut",
        repeat: Infinity,
        repeatType: "mirror",
      },
    });

    // Content section animations
    contentControls.start({
      opacity: 1,
      y: 0,
      transition: {
        duration: 0.5,
        staggerChildren: 0.1,
        delayChildren: 0.2,
      },
    });

    // Stats items staggered animation
    statItemControls.start({
      scale: [0.9, 1],
      opacity: [0, 1],
      y: [10, 0],
      transition: {
        duration: 0.4,
      },
    });
  }, [
    bookControls,
    containerControls,
    particlesControls,
    contentControls,
    statItemControls,
  ]);

  return (
    <div className="block md:hidden">
      <motion.div
        className="relative py-2"
        animate={containerControls}
        style={{ perspective: "1000px" }}
      >
        {/* Ambient floating particles - Apple-style subtle depth */}
        <div className="absolute inset-0 overflow-hidden">
          <motion.div
            className="absolute top-1/4 -left-10 w-20 h-20 rounded-full bg-gradient-to-r from-indigo-400/10 to-purple-400/10 blur-xl"
            animate={particlesControls}
          />
          <motion.div
            className="absolute bottom-1/3 -right-10 w-24 h-24 rounded-full bg-gradient-to-r from-blue-400/10 to-cyan-400/10 blur-xl"
            animate={particlesControls}
            transition={{
              delay: 1,
            }}
          />
        </div>

        {/* Enhanced mobile layout with split design */}
        <div className="flex flex-col">
          {/* Top section with book cover and key stats */}
          <div className="flex items-start mb-3">
            {/* Book cover with 3D effects */}
            <motion.div
              className="relative w-28 h-40 mr-3 group"
              animate={bookControls}
              whileTap={{ scale: 0.97, rotateY: 8 }}
              style={{
                transformStyle: "preserve-3d",
                transformOrigin: "center center",
              }}
            >
              {/* 3D book effect with spine */}
              <div
                className="relative h-full w-full rounded-lg overflow-hidden shadow-xl"
                style={{
                  transformStyle: "preserve-3d",
                }}
              >
                {/* Book pages effect - subtle edge */}
                <div className="absolute left-0 top-0 bottom-0 w-[5px] bg-gradient-to-r from-gray-300/40 to-transparent transform -skew-y-6 z-10"></div>

                <Image
                  src="/bookCover.png"
                  alt="Clean Code Zero to One"
                  width={140}
                  height={200}
                  className="h-full w-full object-cover"
                  priority
                />

                {/* Interactive hover glare effect */}
                <div className="absolute inset-0 bg-gradient-to-tr from-transparent via-white/0 to-transparent opacity-0 group-hover:opacity-20 transition-opacity duration-300 z-10"></div>

                {/* Enhanced floating price tag with discount */}
                <motion.div
                  className="absolute -bottom-4 -right-4 bg-gradient-to-r from-indigo-600 to-purple-600 rounded-lg shadow-lg p-2 transform-gpu"
                  initial={{ opacity: 0, scale: 0.8, y: 10 }}
                  animate={{
                    opacity: 1,
                    scale: [1, 1.05, 1],
                    y: [0, -2, 0],
                    rotate: [-2, 1, -2],
                    boxShadow: [
                      "0 4px 10px rgba(76, 29, 149, 0.3)",
                      "0 8px 16px rgba(76, 29, 149, 0.4)",
                      "0 4px 10px rgba(76, 29, 149, 0.3)",
                    ],
                  }}
                  transition={{
                    duration: 6,
                    repeat: Infinity,
                    repeatType: "loop",
                    times: [0, 0.5, 1],
                  }}
                >
                  <div className="flex flex-col items-center">
                    {/* Original price with strikethrough */}
                    <span className="text-xs text-white/80 line-through">
                      $99.99
                    </span>
                    
                    {/* Current price */}
                    <div className="flex items-center gap-1">
                      <ShoppingCart size={10} className="text-white" />
                      <span className="text-base font-bold text-white">
                        $69.99
                      </span>
                    </div>
                    
                    {/* Save badge */}
                    <div className="absolute -top-2 -right-2 bg-rose-500 text-white text-[9px] font-bold px-1.5 py-0.5 rounded-full shadow-md">
                      SAVE 30%
                    </div>
                  </div>
                </motion.div>

                {/* Enhanced glass card feel with better overlay gradients */}
                <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-black/10 to-black/30"></div>

                {/* Subtle highlight on edge */}
                <div className="absolute top-0 left-0 right-0 h-[1px] bg-white/20"></div>
                <div className="absolute top-0 bottom-0 right-0 w-[1px] bg-white/10"></div>
              </div>

              {/* Enhanced dynamic shadow with motion */}
              <motion.div
                className="absolute -bottom-2 left-0 right-0 h-4 bg-gradient-to-r from-black/20 via-black/30 to-black/20 blur-md rounded-full -z-10 transform scale-x-[0.85] opacity-60"
                animate={{
                  scaleX: [0.85, 0.9, 0.85],
                  opacity: [0.6, 0.7, 0.6],
                  filter: ["blur(6px)", "blur(8px)", "blur(6px)"],
                }}
                transition={{
                  duration: 8,
                  repeat: Infinity,
                  repeatType: "mirror",
                  ease: "easeInOut",
                }}
              />
            </motion.div>

            {/* Book info and key stats */}
            <motion.div
              className="flex-1"
              initial={{ opacity: 0, y: 5 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.1 }}
            >
              <h2
                className={`text-base font-bold leading-tight mb-1 ${
                  isDark ? "text-white" : "text-gray-800"
                }`}
              >
                Clean Code Zero to One
              </h2>
              <p
                className={`text-xs mb-2 ${
                  isDark ? "text-indigo-300" : "text-indigo-600"
                }`}
              >
                From Messy Code to Masterpiece
              </p>

              {/* Updated key stats with new content */}
              <div className="grid grid-cols-2 gap-1">
                <motion.div
                  className={`flex items-center text-xs ${
                    isDark ? "text-white/90" : "text-gray-700"
                  }`}
                  initial={{ opacity: 0, y: 8 }}
                  animate={statItemControls}
                >
                  <div
                    className={`w-4 h-4 rounded-full flex items-center justify-center mr-1 ${
                      isDark ? "bg-green-500/20" : "bg-green-100"
                    }`}
                  >
                    <Check
                      size={8}
                      className={isDark ? "text-green-400" : "text-green-600"}
                    />
                  </div>
                  <span>216+ Pages</span>
                </motion.div>

                <motion.div
                  className={`flex items-center text-xs ${
                    isDark ? "text-white/90" : "text-gray-700"
                  }`}
                  initial={{ opacity: 0, y: 8 }}
                  animate={statItemControls}
                  transition={{ delay: 0.1 }}
                >
                  <div
                    className={`w-4 h-4 rounded-full flex items-center justify-center mr-1 ${
                      isDark ? "bg-blue-500/20" : "bg-blue-100"
                    }`}
                  >
                    <Check
                      size={8}
                      className={isDark ? "text-blue-400" : "text-blue-600"}
                    />
                  </div>
                  <span>900+ Examples</span>
                </motion.div>

                <motion.div
                  className={`flex items-center text-xs ${
                    isDark ? "text-white/90" : "text-gray-700"
                  }`}
                  initial={{ opacity: 0, y: 8 }}
                  animate={statItemControls}
                  transition={{ delay: 0.2 }}
                >
                  <div
                    className={`w-4 h-4 rounded-full flex items-center justify-center mr-1 ${
                      isDark ? "bg-amber-500/20" : "bg-amber-100"
                    }`}
                  >
                    <Check
                      size={8}
                      className={isDark ? "text-amber-400" : "text-amber-600"}
                    />
                  </div>
                  <span>30-Day Guarantee</span>
                </motion.div>

                <motion.div
                  className={`flex items-center text-xs ${
                    isDark ? "text-white/90" : "text-gray-700"
                  }`}
                  initial={{ opacity: 0, y: 8 }}
                  animate={statItemControls}
                  transition={{ delay: 0.3 }}
                >
                  <div
                    className={`w-4 h-4 rounded-full flex items-center justify-center mr-1 ${
                      isDark ? "bg-purple-500/20" : "bg-purple-100"
                    }`}
                  >
                    <Check
                      size={8}
                      className={isDark ? "text-purple-400" : "text-purple-600"}
                    />
                  </div>
                  <span>Lifetime Access</span>
                </motion.div>
              </div>
            </motion.div>
          </div>

          {/* Book description - New valuable content */}
          <motion.div
            className={`mb-3 px-2 py-2 rounded-lg backdrop-blur-sm text-xs ${
              isDark
                ? "bg-white/5 text-white/80 border border-white/10"
                : "bg-black/5 text-gray-700 border border-black/5"
            }`}
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.4 }}
          >
            <p className="leading-relaxed">
              Master modern coding principles, design patterns, and optimization
              techniques used by top engineers at Apple, Google and Microsoft.
            </p>
          </motion.div>

          {/* Topics section - new valuable content */}
          <motion.div
            className="mb-3"
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.5 }}
          >
            <div className="flex flex-wrap gap-1">
              {[
                "Clean Syntax",
                "Architecture",
                "Testing",
                "Patterns",
                "Refactoring",
                "Performance",
              ].map((topic, i) => (
                <motion.span
                  key={i}
                  className={`text-[10px] px-2 py-1 rounded-full ${
                    isDark
                      ? "bg-white/10 text-white/90 border border-white/10"
                      : "bg-black/5 text-gray-700 border border-black/5"
                  }`}
                  initial={{ opacity: 0, scale: 0.8 }}
                  animate={{ opacity: 1, scale: 1 }}
                  transition={{ delay: 0.5 + i * 0.05 }}
                  whileHover={{
                    scale: 1.05,
                    backgroundColor: isDark
                      ? "rgba(255,255,255,0.15)"
                      : "rgba(0,0,0,0.1)",
                  }}
                >
                  {topic}
                </motion.span>
              ))}
            </div>
          </motion.div>

          {/* Reviews section - New content */}
          <motion.div
            className={`mb-3 px-2 py-2 rounded-lg text-xs ${
              isDark
                ? "bg-gradient-to-br from-indigo-500/10 to-purple-500/10 border border-indigo-500/20"
                : "bg-gradient-to-br from-indigo-500/5 to-purple-500/5 border border-indigo-500/10"
            }`}
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.6 }}
          >
            <div className="flex gap-1 mb-1 justify-center">
              {[1, 2, 3, 4, 5].map((_, i) => (
                <svg
                  key={i}
                  className="w-3 h-3 text-yellow-500"
                  fill="currentColor"
                  viewBox="0 0 20 20"
                >
                  <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                </svg>
              ))}
            </div>
            <p
              className={`text-center italic ${
                isDark ? "text-white/80" : "text-gray-700"
              }`}
            >
              "This book transformed the way I approach coding!"
            </p>
            <p
              className={`text-center mt-1 ${
                isDark ? "text-white/60" : "text-gray-500"
              }`}
            >
              — Senior Developer
            </p>
          </motion.div>

          {/* Action buttons with better elevation and tactile feel */}
          <div className="flex gap-2 justify-between mt-2">
            <motion.div
              className="flex-1"
              whileHover={{ scale: 1.03, y: -2 }}
              whileTap={{ scale: 0.95 }}
              transition={{
                type: "spring",
                stiffness: 500,
                damping: 30,
              }}
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              custom={{ delay: 0.8 }}
            >
              <Link
                href="https://shahan.gumroad.com/l/clean-code"
                target="_blank"
                rel="noopener noreferrer"
                className={`w-full px-4 py-2 rounded-full flex items-center justify-center gap-1.5 text-xs font-medium ${
                  isDark
                    ? "bg-gradient-to-r from-blue-600 to-blue-500 text-white hover:shadow-[0_0_15px_rgba(59,130,246,0.5)]"
                    : "bg-gradient-to-r from-blue-500 to-blue-400 text-white hover:shadow-[0_0_15px_rgba(59,130,246,0.4)]"
                } transition-shadow duration-300 shadow-sm`}
              >
                <ShoppingCart size={12} />
                <span>Buy Now</span>
              </Link>
            </motion.div>

            <motion.div
              className="flex-1"
              whileHover={{ scale: 1.03, y: -2 }}
              whileTap={{ scale: 0.95 }}
              transition={{
                type: "spring",
                stiffness: 500,
                damping: 30,
              }}
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              custom={{ delay: 0.9 }}
            >
              <Link
                href={STORE}
                className={`w-full px-4 py-2 rounded-full flex items-center justify-center gap-1.5 text-xs font-medium backdrop-blur-sm ${
                  isDark
                    ? "bg-white/10 text-white border border-white/20 hover:bg-white/20 hover:shadow-[0_0_15px_rgba(255,255,255,0.2)]"
                    : "bg-black/5 text-black border border-black/10 hover:bg-black/10 hover:shadow-[0_0_15px_rgba(0,0,0,0.1)]"
                } transition-all duration-300`}
              >
                <BookOpen size={12} />
                <span>Details</span>
              </Link>
            </motion.div>
          </div>
        </div>
      </motion.div>
    </div>
  );
};

const EbookBanner = () => {
  const [dismissed, setDismissed] = useState(false);
  const [scrolled, setScrolled] = useState(false);
  const controls = useAnimation();
  const miniCardControls = useAnimation();
  const [imageError, setImageError] = useState(false);
  const { scrollY } = useScroll();
  const [animationState, setAnimationState] = useState("visible");
  const bookControls = useAnimation();
  const parallaxControls = useAnimation();
  const [blurIntensity, setBlurIntensity] = useState(0);
  const [glassOpacity, setGlassOpacity] = useState(0.1);
  const bannerRef = useRef(null);
  const { resolvedTheme, theme } = useTheme();
  const [isDark, setIsDark] = useState(false);
  const [hasScrolledToHero, setHasScrolledToHero] = useState(false);
  const [isInitialLoad, setIsInitialLoad] = useState(true);
  const [completelyRemoved, setCompletelyRemoved] = useState(false);
  const [bannerActive, setBannerActive] = useState(true);
  const router = useRouter();
  const [miniCardVisible, setMiniCardVisible] = useState(false);
  const [canShowMiniCard, setCanShowMiniCard] = useState(false);
  const [hasMounted, setHasMounted] = useState(false);
  const [exitAnimation, setExitAnimation] = useState(false);
  const [exitProgress, setExitProgress] = useState(0);
  const [shouldDestroy, setShouldDestroy] = useState(false);
  const animationRef = useRef<number | null>(null);
  const animationTimerRef = useRef<NodeJS.Timeout | null>(null);
  const [soundEnabled, setSoundEnabled] = useState(true);
  const hasSoundPlayed = useRef(false);

  // Add sound hooks with proper volume settings
  const [playGlassHit] = useSound("/sounds/glass-hit.mp3", {
    volume: 0.6
  });

  // Handle theme detection after component mount to prevent hydration mismatch
  useEffect(() => {
    setHasMounted(true);
    setIsDark(resolvedTheme === "dark");

    // Prevent errors from crypto browser extensions
    if (typeof window !== "undefined") {
      // Add TypeScript declaration for ethereum property
      const win = window as any;
      if (!win.ethereum) {
        win.ethereum = {
          setExternalProvider: () => {},
          // Add other common methods that extensions might try to call
          request: () => Promise.resolve(),
          on: () => {},
          removeListener: () => {},
          isConnected: () => false,
        };
      }
    }
  }, [resolvedTheme]);

  // Update theme when it changes
  useEffect(() => {
    if (hasMounted) {
      setIsDark(resolvedTheme === "dark");
    }
  }, [resolvedTheme, hasMounted]);

  // Make sure audio context is activated by user interaction
  useEffect(() => {
    const unlockAudio = () => {
      // Create and play a silent audio context to unlock audio on browsers
      const AudioContext =
        window.AudioContext || (window as any).webkitAudioContext;
      if (AudioContext) {
        const audioContext = new AudioContext();
        // Create silent buffer
        const buffer = audioContext.createBuffer(1, 1, 22050);
        const source = audioContext.createBufferSource();
        source.buffer = buffer;
        source.connect(audioContext.destination);
        source.start(0);

        // Clean up listener after first interaction
        window.removeEventListener("touchstart", unlockAudio);
        window.removeEventListener("touchend", unlockAudio);
        window.removeEventListener("click", unlockAudio);
        window.removeEventListener("keydown", unlockAudio);
      }
    };

    // Add event listeners for user interaction
    window.addEventListener("touchstart", unlockAudio);
    window.addEventListener("touchend", unlockAudio);
    window.addEventListener("click", unlockAudio);
    window.addEventListener("keydown", unlockAudio);

    return () => {
      // Clean up listeners on unmount
      window.removeEventListener("touchstart", unlockAudio);
      window.removeEventListener("touchend", unlockAudio);
      window.removeEventListener("click", unlockAudio);
      window.removeEventListener("keydown", unlockAudio);
    };
  }, []);

  // Initialize banner on first load
  useEffect(() => {
    // Set initial animation with a small delay to ensure proper mounting
    const timer = setTimeout(() => {
      if (!dismissed) {
        controls.start({
          opacity: 1,
          scale: 1,
          y: 0,
          height: "auto",
          marginTop: "1.5rem", // Reduced from 2.5rem
          marginBottom: "2rem", // Reduced for better spacing
          padding: "2rem 1rem", // Reduced from 2.5rem
          pointerEvents: "auto",
          transition: {
            duration: 0.6,
            ease: [0.16, 1, 0.3, 1],
          },
        });
      }
    }, 100);

    // Mark initial load as complete after a delay
    const initialLoadTimer = setTimeout(() => {
      setIsInitialLoad(false);
    }, 600);

    return () => {
      clearTimeout(timer);
      clearTimeout(initialLoadTimer);
    };
  }, [controls, dismissed]);

  // Add more dramatic auto-breathing animation for the entire banner
  useEffect(() => {
    if (hasMounted && !scrolled && !exitAnimation) {
      // Create a constant, organic breathing effect for the entire banner
      controls.start({
        scale: [1, 1.01, 1.005, 1],
        y: [0, -2, -1, 0],
        filter: ["blur(0px)", "blur(0.2px)", "blur(0.1px)", "blur(0px)"],
        boxShadow: [
          "0 10px 30px rgba(0,0,0,0.15)",
          "0 15px 40px rgba(0,0,0,0.2)",
          "0 12px 35px rgba(0,0,0,0.18)",
          "0 10px 30px rgba(0,0,0,0.15)",
        ],
        transition: {
          duration: 8,
          ease: "easeInOut",
          repeat: Infinity,
          repeatType: "loop",
          times: [0, 0.4, 0.7, 1],
        },
      });
    }
  }, [hasMounted, controls, scrolled, exitAnimation]);

  // Enhanced auto-breathing animation for the book cover with more realistic physics
  useEffect(() => {
    if (hasMounted && !scrolled && !exitAnimation) {
      // Auto-breathing animation for the book with realistic paper/page movement
      bookControls.start({
        scale: [1, 1.055, 1.03, 0.995, 1],
        y: [0, -10, -5, -2, 0],
        rotateY: [0, 8, 4, 1, 0],
        rotateX: [0, 2.5, 1.5, 0.5, 0],
        boxShadow: [
          "0 15px 25px rgba(0,0,0,0.2)",
          "0 40px 60px rgba(0,0,0,0.4)",
          "0 30px 45px rgba(0,0,0,0.35)",
          "0 20px 30px rgba(0,0,0,0.25)",
          "0 15px 25px rgba(0,0,0,0.2)",
        ],
        // Remove filter blur effects that might cause text blurriness
        transition: {
          duration: 8,
          ease: [0.33, 0.67, 0.5, 1], // Custom easing to prevent sudden drops
          repeat: Infinity,
          repeatType: "loop",
          times: [0, 0.25, 0.5, 0.75, 1],
        },
      });
    }
  }, [hasMounted, bookControls, scrolled, exitAnimation]);

  // Add subtle particle animation in the background
  useEffect(() => {
    if (hasMounted && !scrolled && !exitAnimation) {
      parallaxControls.start({
        x: [0, 5, 0],
        opacity: [0.7, 1, 0.7],
        transition: {
          duration: 10,
          ease: "easeInOut",
          repeat: Infinity,
          repeatType: "mirror",
        },
      });
    }
  }, [hasMounted, parallaxControls, scrolled, exitAnimation]);

  // Handle complete dismissal with glassy toast-like animation
  const handleCompleteDismissal = useCallback(() => {
    // Start the exit animation first
    setExitAnimation(true);
    
    // Animate the exit progress from 0 to 100%
    if (animationRef.current) {
      cancelAnimationFrame(animationRef.current);
    }

    const startTime = Date.now();
    // Three phases: initial bounce against navbar, falling, exiting screen
    const initialBounceTime = 300; // 300ms for the initial bounce (37.5% of total)
    const fallingTime = 400; // 400ms for falling (50% of total)
    const exitTime = 100; // 100ms for exiting screen (12.5% of total)
    const totalDuration = initialBounceTime + fallingTime + exitTime; // 800ms total

    const animateExit = () => {
      const elapsedTime = Date.now() - startTime;
      const progress = Math.min(elapsedTime / totalDuration, 1);

      // Separate the animation into phases
      if (elapsedTime <= initialBounceTime) {
        // Phase 1: Initial contact with navbar (0-0.36 of total progress)
        const bounceProgress = elapsedTime / initialBounceTime;
        // Custom bounce easing function with proper type annotation
        const bounceEase = (t: number): number => {
          // Start with slow, then speed up (hit) then bounce back a bit
          const impact = 0.7; // Point of maximum impact
          if (t < impact) {
            // Accelerate toward the impact point (easeIn)
            return (t / impact) * (t / impact);
          } else {
            // Bounce back slightly (easeOutBack)
            const overshoot = 1.2;
            const t2 = (t - impact) / (1 - impact);
            return (
              impact +
              (1 - impact) *
                (1 - (1 - t2) * (1 - t2) * (1 + overshoot * (1 - t2)))
            );
          }
        };

        // Play glass hit sound with a wider window to ensure full playback
        if (
          bounceProgress >= 0.6 &&
          bounceProgress <= 0.8 &&
          !hasSoundPlayed.current &&
          soundEnabled
        ) {
          playGlassHit();
          hasSoundPlayed.current = true;
        }

        setExitProgress(bounceEase(bounceProgress) * 0.36); // Scale to 36% of total effect
      } else if (elapsedTime <= initialBounceTime + fallingTime) {
        // Phase 2: Falling (0.36-0.82 of total progress)
        const fallProgress = (elapsedTime - initialBounceTime) / fallingTime;
        // Gravity-based falling with proper type annotation
        const fallEase = (t: number): number => {
          // Accelerate with gravity (quadratic)
          return t * t;
        };

        const adjustedFall = 0.36 + fallEase(fallProgress) * 0.46; // Start from 0.36 (where bounce ended) to 0.82
        setExitProgress(adjustedFall);
      } else {
        // Phase 3: Exiting screen (0.82-1.0 of total progress)
        const exitProgress =
          (elapsedTime - initialBounceTime - fallingTime) / exitTime;
        // Accelerating exit with proper type annotation
        const exitEase = (t: number): number => {
          // Continue acceleration
          return t * t;
        };

        const adjustedExit = 0.82 + exitEase(exitProgress) * 0.18; // Start from 0.82 to 1.0
        setExitProgress(adjustedExit);
      }

      if (progress < 1) {
        animationRef.current = requestAnimationFrame(animateExit);
      } else {
        // Reset the sound played flag for next animation
        hasSoundPlayed.current = false;

        // After the animation completes, set final flags to remove from DOM
        setTimeout(() => {
          setDismissed(true);
          setBannerActive(false);
          setShouldDestroy(true);

          // Find the hero section and scroll to it
          const heroSection = document.querySelector(".hero");
          if (heroSection) {
            // Use a simple scroll without any smooth behavior to avoid interference
            window.scrollTo({
              top:
                heroSection.getBoundingClientRect().top + window.scrollY - 60,
              behavior: "auto",
            });
          }
        }, 200);
      }
    };

    animationRef.current = requestAnimationFrame(animateExit);
  }, [playGlassHit, soundEnabled]);

  // Detect user's sound preference from localStorage if available
  useEffect(() => {
    if (typeof window !== "undefined") {
      const savedPreference = localStorage.getItem("soundEnabled");
      if (savedPreference !== null) {
        setSoundEnabled(savedPreference === "true");
      }
    }
  }, []);

  // Cleanup on unmount or when completely removed
  useEffect(() => {
    return () => {
      hasSoundPlayed.current = false;
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current);
      }
      if (animationTimerRef.current) {
        clearTimeout(animationTimerRef.current);
      }
    };
  }, []);

  // Cleanup effect when shouldDestroy is set
  useEffect(() => {
    if (shouldDestroy) {
      // Force a complete cleanup of all resources
      controls.stop();
      bookControls.stop();
      miniCardControls.stop();
      parallaxControls.stop();

      // Clear any remaining animation frames or timers
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current);
      }

      // Remove listener references
      const cleanup = scrollY.clearListeners();
      return cleanup;
    }
  }, [
    shouldDestroy,
    controls,
    bookControls,
    miniCardControls,
    parallaxControls,
    scrollY,
  ]);

  // Store last scroll position
  const lastScrollPosition = useRef(0);
  const scrollTimeout = useRef<NodeJS.Timeout | null>(null);

  // Track scroll position and handle banner and mini card visibility
  useEffect(() => {
    // Return early if banner is not active
    if (!bannerActive || dismissed || shouldDestroy) return;

    // Prevent rapid scroll state changes with debounce
    const debounceScroll = (callback: () => void, delay: number = 100) => {
      if (scrollTimeout.current) {
        clearTimeout(scrollTimeout.current);
      }
      scrollTimeout.current = setTimeout(callback, delay);
    };

    const unsubscribe = scrollY.onChange((y) => {
      // Skip scroll handling during initial load
      if (isInitialLoad) return;

      // Store scroll direction
      const isScrollingDown = y > lastScrollPosition.current;
      const scrollDelta = Math.abs(y - lastScrollPosition.current);
      lastScrollPosition.current = y;

      // Calculate blur based on scroll position (0-200px)
      if (y <= 200) {
        const progress = y / 200;
        setBlurIntensity(progress * 10); // 0-10px of blur
      }

      // Debounce scroll events for smoother transitions
      if (scrollDelta > 50) {
        // Start high-speed exit animation when scrolling down past threshold
        if (y > 200 && !scrolled && isScrollingDown && bannerActive) {
          debounceScroll(() => {
            setScrolled(true);
            setAnimationState("exiting");
            handleCompleteDismissal();
          }, 50);
        } else if (
          y <= 100 &&
          scrolled &&
          !isScrollingDown &&
          bannerActive &&
          !dismissed &&
          !exitAnimation
        ) {
          // If scrolling back up significantly
          debounceScroll(() => {
            setScrolled(false);
            setAnimationState("entering");
            setMiniCardVisible(false);

            // Start the banner entrance animation with depth effect
            controls.start({
              opacity: 1,
              scale: 1,
              y: 0,
              filter: "blur(0px)",
              height: "auto",
              marginTop: "2.5rem",
              marginBottom: "2.5rem",
              padding: "2.5rem 1rem",
              pointerEvents: "auto",
              transition: {
                duration: 0.6,
                ease: [0.16, 1, 0.3, 1],
                opacity: { duration: 0.5, delay: 0.1 },
                scale: { duration: 0.6 },
                filter: { duration: 0.3, delay: 0.2 },
                height: { duration: 0.4 },
                y: { duration: 0.5, delay: 0.05 },
              },
            });

            // Then animate the book back in with depth effect
            setTimeout(() => {
              bookControls.start({
                x: 0,
                rotateY: 0,
                opacity: 1,
                scale: 1,
                filter: "blur(0px)",
                transition: {
                  duration: 0.7,
                  ease: [0.34, 1.3, 0.64, 1],
                  opacity: { duration: 0.6 },
                  filter: { duration: 0.4 },
                  rotateY: { duration: 0.8 },
                },
              });
            }, 300);
          }, 50);
        }
      }

      // Safely manage mini card visibility to prevent flickering - use direct state instead of animation
      if (
        canShowMiniCard &&
        y > 300 &&
        y < 500 &&
        !isScrollingDown &&
        !miniCardVisible &&
        !exitAnimation
      ) {
        debounceScroll(() => {
          setMiniCardVisible(true);
        }, 100);
      } else if ((y <= 200 || y >= 600 || isScrollingDown) && miniCardVisible) {
        debounceScroll(() => {
          setMiniCardVisible(false);
        }, 100);
      }
    });

    // Clear timeout on cleanup
    return () => {
      unsubscribe();
      if (scrollTimeout.current) {
        clearTimeout(scrollTimeout.current);
      }
    };
  }, [
    scrollY,
    controls,
    scrolled,
    bookControls,
    isInitialLoad,
    bannerActive,
    dismissed,
    handleCompleteDismissal,
    miniCardVisible,
    miniCardControls,
    canShowMiniCard,
    exitAnimation,
    shouldDestroy,
  ]);

  // Function to expand mini card back to full banner
  const handleExpandMiniCard = useCallback(() => {
    if (scrollTimeout.current) {
      clearTimeout(scrollTimeout.current);
    }

    setScrolled(false);
    setMiniCardVisible(false);
    setAnimationState("entering");

    // Animate full banner back in with safe properties (no mixed units)
    controls.start({
      opacity: 1,
      scale: 1,
      y: 0,
      filter: "blur(0px)",
      height: "auto",
      marginTop: "2.5rem",
      marginBottom: "2.5rem",
      padding: "2.5rem 1rem",
      pointerEvents: "auto",
      transition: {
        duration: 0.6,
        ease: [0.16, 1, 0.3, 1],
      },
    });

    // Animate book back in with safe properties
    bookControls.start({
      x: 0,
      rotateY: 0,
      opacity: 1,
      scale: 1,
      filter: "blur(0px)",
      transition: {
        duration: 0.7,
        ease: [0.34, 1.3, 0.64, 1],
      },
    });

    // Scroll back to top to see full banner
    window.scrollTo({
      top: 0,
      behavior: "smooth",
    });
  }, [controls, bookControls]);

  // Modify the existing scroll animation to include a glassy effect
  useEffect(() => {
    const unsubscribeParallax = scrollY.onChange((y) => {
      // Only animate when scrolling down a little bit, not when staying still
      if (!scrolled && y > 0 && y <= 100) {
        // Apply a glassy transition effect
        const glassOpacityValue = (y / 100) * 0.25; // Increase glass opacity as we scroll
        setGlassOpacity(0.1 + glassOpacityValue);

        // Calculate realistic physics parameters based on scroll
        const progress = y / 100;
        const cubicEasedProgress = progress * progress * (3 - 2 * progress); // Cubic ease

        // Super fast bullet-like effect with realistic physics
        const horizontalShift = y * (3 + cubicEasedProgress * 2); // Exponential acceleration
        const skewAmount =
          Math.min(20, y * 0.3) * (1 - cubicEasedProgress * 0.5); // Initial skew that corrects at high speeds
        const scaleX = 1 + cubicEasedProgress * 0.05; // Slight stretch
        const scaleY = 1 - cubicEasedProgress * 0.03; // Slight compression

        parallaxControls.start({
          x: horizontalShift,
          skewX: -skewAmount,
          scale: [scaleX, scaleY],
          opacity: 1 - cubicEasedProgress * 0.4,
          transition: {
            type: "spring",
            damping: 10, // Lower damping for more fluid motion
            stiffness: 250, // Higher stiffness for snappier movement
            mass: 0.8, // Lighter mass to react faster
          },
        });

        // Apply subtle bullet-like transformation to the main container
        controls.start({
          skewX: -progress * 8, // Subtle skew effect
          x: progress * 15, // Slight horizontal movement
          scale: 1 - progress * 0.03, // Subtle scale down
          transition: {
            type: "spring",
            damping: 15,
            stiffness: 300,
          },
        });

        // Apply bookCover motion like it's being pushed by air pressure
        bookControls.start({
          rotateY: progress * 10, // Book page flipping effect
          scale: 1 - progress * 0.05, // Book compressing
          x: progress * 8, // Book shifting
          transition: {
            type: "spring",
            damping: 12,
            stiffness: 200,
          },
        });

        // Simulate air compression with blur intensity
        setBlurIntensity(progress * progress * 8); // Non-linear blur based on scroll
      } else if (y > 100 && !scrolled) {
        // If scrolled more than threshold, prepare to dismiss with high velocity
        setScrolled(true);
        setAnimationState("exiting");
        handleCompleteDismissal();
      }
    });

    return () => unsubscribeParallax();
  }, [
    scrollY,
    parallaxControls,
    controls,
    bookControls,
    scrolled,
    handleCompleteDismissal,
  ]);

  // Only return null if dismissed, but keep the component alive
  if (dismissed || shouldDestroy) return null;

  // Early static return for server-side render to prevent hydration mismatch
  if (!hasMounted) {
    return (
      <div className="w-full px-4 py-10 flex justify-center items-center sticky top-16 z-20">
        <div className="w-full max-w-6xl rounded-2xl overflow-hidden shadow-lg border bg-black/5 dark:bg-[#1c1c1e]/90 dark:border-[#3a3a3c] p-6">
          {/* Pre-mounted placeholder */}
          <div className="h-64 md:h-80 flex items-center justify-center">
            <div className="animate-pulse w-8 h-8 rounded-full bg-gray-300 dark:bg-gray-700" />
          </div>
        </div>
      </div>
    );
  }

  // Replace the exit animation with a realistic rubber-like bouncing effect
  if (exitAnimation) {
    // Calculate physics-based transformations based on exit progress
    // Phase 1 (0-0.36): Initial contact with navbar, compression and slight bounce back
    // Phase 2 (0.36-0.82): Falling with acceleration and rotation
    // Phase 3 (0.82-1.0): Exiting screen with continued acceleration

    // Calculate rotation and skew effects
    let rotation = 0;
    let skewX = 0;
    let scaleX = 1;
    let scaleY = 1;
    let positionY = 0;
    let positionX = 0;
    let shadowOpacity = 0.3;

    // Check for mobile screen size
    const isMobile = typeof window !== "undefined" && window.innerWidth < 768;

    if (exitProgress < 0.36) {
      // Phase 1: Contact with navbar - compression and slight rotation
      const normalizedProgress = exitProgress / 0.36;
      // Initial hit causes leftward rotation
      rotation =
        normalizedProgress < 0.7
          ? -normalizedProgress * (isMobile ? 3 : 5) // Reduce rotation on mobile
          : (isMobile ? -2.1 : -3.5) +
            (normalizedProgress - 0.7) * (isMobile ? 7 : 12); // Bounce back right

      // Compression effect on impact
      scaleY =
        normalizedProgress < 0.7
          ? 1 - normalizedProgress * (isMobile ? 0.15 : 0.2) // Less compression on mobile
          : (isMobile ? 0.9 : 0.8) +
            (normalizedProgress - 0.7) * (isMobile ? 0.15 : 0.25);

      scaleX =
        normalizedProgress < 0.7
          ? 1 + normalizedProgress * (isMobile ? 0.05 : 0.1) // Less stretching on mobile
          : (isMobile ? 1.035 : 1.07) -
            (normalizedProgress - 0.7) * (isMobile ? 0.07 : 0.12);

      // Skew effect during compression
      skewX =
        normalizedProgress < 0.7
          ? -normalizedProgress * (isMobile ? 5 : 8)
          : (isMobile ? -3.5 : -5.6) +
            (normalizedProgress - 0.7) * (isMobile ? 6 : 10);

      // Movement: initially stationary at top, then slight bounce at navbar (top of screen)
      positionY =
        normalizedProgress < 0.7
          ? normalizedProgress * (isMobile ? 3 : 5)
          : (isMobile ? 2.1 : 3.5) -
            (normalizedProgress - 0.7) * (isMobile ? 1 : 2);

      // Slight horizontal movement during collision
      positionX =
        normalizedProgress < 0.7
          ? -normalizedProgress * (isMobile ? 1.5 : 3)
          : (isMobile ? -1.05 : -2.1) +
            (normalizedProgress - 0.7) * (isMobile ? 4 : 8);

      shadowOpacity = 0.3;
    } else if (exitProgress < 0.82) {
      // Phase 2: Falling with acceleration and rotation
      const normalizedProgress = (exitProgress - 0.36) / 0.46;
      const fallingCurve = normalizedProgress * normalizedProgress; // Accelerate fall

      // Falling rotation (clockwise/right rotation as it falls)
      rotation = (isMobile ? 3 : 5) + fallingCurve * (isMobile ? 15 : 25); // Rotate up to 30 degrees

      // Natural stretching as it falls
      scaleY = 1.05 - normalizedProgress * (isMobile ? 0.03 : 0.05); // Slight vertical compression
      scaleX = 0.95 + normalizedProgress * (isMobile ? 0.03 : 0.05); // Slight horizontal stretch

      // Skew effect that increases as it falls
      skewX = (isMobile ? 3 : 5) + normalizedProgress * (isMobile ? 6 : 10); // Skew right as it falls

      // Vertical position: falls from top to beyond bottom
      positionY = (isMobile ? 2 : 3) + fallingCurve * (isMobile ? 90 : 110); // Falls beyond screen, less distance on mobile

      // Horizontal drift as it falls
      positionX = (isMobile ? 3 : 6) + normalizedProgress * (isMobile ? 8 : 15); // Drift right

      shadowOpacity = 0.3 - normalizedProgress * 0.1;
    } else {
      // Phase 3: Exiting screen
      const normalizedProgress = (exitProgress - 0.82) / 0.18;

      // Continue rotation as it exits
      rotation =
        (isMobile ? 18 : 30) + normalizedProgress * (isMobile ? 5 : 10);

      // Maintain shape from phase 2 with slight continued deformation
      scaleY = 1.0 - normalizedProgress * (isMobile ? 0.05 : 0.1);
      scaleX = 1.0 + normalizedProgress * (isMobile ? 0.05 : 0.1);

      // Maintain skew from phase 2
      skewX = (isMobile ? 9 : 15) + normalizedProgress * (isMobile ? 3 : 5);

      // Continue falling faster
      positionY =
        (isMobile ? 92 : 113) +
        normalizedProgress * normalizedProgress * (isMobile ? 20 : 30);

      // Continue drifting
      positionX =
        (isMobile ? 11 : 21) + normalizedProgress * (isMobile ? 5 : 10);

      shadowOpacity = 0.2 - normalizedProgress * 0.2;
    }

    return (
      <div className="fixed inset-0 z-50 pointer-events-none overflow-hidden" style={{ perspective: "1000px" }}>
        {/* Container that follows physics-based motion */}
        <div
          className="absolute w-full max-w-6xl left-1/2 transform-gpu"
          style={{
            transformOrigin: "center top",
            transform: `
              translateX(-50%) 
              translateY(${positionY}vh) 
              translateX(${positionX}vw)
              rotateZ(${rotation}deg) 
              scaleX(${scaleX}) 
              scaleY(${scaleY}) 
              skewX(${skewX}deg)
            `,
            transition: "transform 0.05s linear", // Very slight smoothing
            top: 0,
          }}
        >
          {/* Sound toggle button - small, unobtrusive */}
          <div
            className="absolute -top-8 -right-4 z-50 opacity-70 hover:opacity-100 transition-opacity"
            style={{ pointerEvents: "auto" }}
          >
            <button
              onClick={(e) => {
                e.stopPropagation();
                setSoundEnabled(!soundEnabled);
                if (typeof window !== "undefined") {
                  localStorage.setItem(
                    "soundEnabled",
                    (!soundEnabled).toString()
                  );
                }
              }}
              className={`p-1.5 rounded-full ${
                isDark
                  ? "bg-gray-800 text-gray-300"
                  : "bg-gray-200 text-gray-600"
              } hover:ring-1 hover:ring-indigo-300 transition-all`}
              aria-label={soundEnabled ? "Mute sound" : "Enable sound"}
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="14"
                height="14"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
              >
                {soundEnabled ? (
                  <>
                    <polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5"></polygon>
                    <path d="M15.54 8.46a5 5 0 0 1 0 7.07"></path>
                    <path d="M19.07 4.93a10 10 0 0 1 0 14.14"></path>
                  </>
                ) : (
                  <>
                    <polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5"></polygon>
                    <line x1="23" y1="9" x2="17" y2="15"></line>
                    <line x1="17" y1="9" x2="23" y2="15"></line>
                  </>
                )}
              </svg>
            </button>
          </div>

          {/* Banner content with mobile optimizations */}
          <div
            className={`w-full rounded-2xl overflow-hidden border ${
              isDark
                ? "bg-[#1c1c1e] border-[#3a3a3c]"
                : "bg-[#ffffff] border-[#e0e0e0]"
            }`}
            style={{
              boxShadow: `0 ${5 + exitProgress * 15}px ${
                10 + exitProgress * 20
              }px rgba(0,0,0,${isDark ? 0.4 : 0.2})`,
            }}
          >
            {/* Window header with controls */}
            <div className="relative h-8 md:h-10 px-4 flex items-center border-b dark:border-[#3a3a3c] light:border-[#e0e0e0]">
              <div className="flex items-center gap-1.5 md:gap-2">
                <div className="w-2.5 h-2.5 md:w-3 md:h-3 rounded-full bg-[#ff5f57]" />
                <div className="w-2.5 h-2.5 md:w-3 md:h-3 rounded-full bg-[#febc2e]" />
                <div className="w-2.5 h-2.5 md:w-3 md:h-3 rounded-full bg-[#28c840]" />
              </div>
              <div
                className={`absolute left-1/2 -translate-x-1/2 text-[10px] md:text-xs font-medium ${
                  isDark ? "text-gray-400" : "text-gray-500"
                } truncate max-w-[60%] text-center`}
              >
                Clean Code Zero to One
              </div>
            </div>

            {/* Mobile-optimized content area with flex layout */}
            <div className="px-4 py-4 md:px-6 md:py-8 flex items-center">
              {/* Book cover image - smaller on mobile */}
              <div className="w-14 h-22 md:w-20 md:h-32 mr-3 md:mr-6 rounded-lg overflow-hidden shadow-lg flex-shrink-0">
                <Image
                  src="/bookCover.png"
                  alt="Book Cover"
                  width={80}
                  height={120}
                  className="w-full h-full object-cover"
                />
              </div>

              {/* Text content - more compact on mobile */}
              <div className="flex-1 min-w-0">
                <div
                  className={`text-base md:text-lg font-bold mb-1 md:mb-2 line-clamp-2 ${
                    isDark ? "text-white" : "text-gray-800"
                  }`}
                >
                  Clean Code Zero to One
                </div>
                <div
                  className={`text-xs md:text-sm mb-1 md:mb-2 line-clamp-1 ${
                    isDark ? "text-gray-300" : "text-gray-600"
                  }`}
                >
                  From Messy Code to Masterpiece
                </div>
                <div
                  className={`inline-flex items-center px-2 py-0.5 md:px-3 md:py-1 rounded-full text-[10px] md:text-xs ${
                    isDark
                      ? "bg-blue-500/20 text-blue-300"
                      : "bg-blue-100 text-blue-700"
                  }`}
                >
                  Bouncing away...
                </div>
              </div>
            </div>

            {/* Glass crack effect elements that appear at impact */}
            {exitProgress >= 0.25 && exitProgress <= 0.4 && (
              <div className="absolute inset-0 pointer-events-none overflow-hidden">
                {/* Glass crack patterns overlaid on the banner with subtle opacity */}
                <div
                  className="absolute top-0 left-0 w-full h-full opacity-0 transition-opacity duration-300"
                  style={{
                    opacity:
                      exitProgress >= 0.25 && exitProgress <= 0.36
                        ? Math.min((exitProgress - 0.25) * 10, 0.3)
                        : Math.max(0, 0.3 - (exitProgress - 0.36) * 8),
                    background: `url("data:image/svg+xml,%3Csvg width='100%25' height='100%25' xmlns='http://www.w3.org/2000/svg'%3E%3Cdefs%3E%3Cpattern id='crack' patternUnits='userSpaceOnUse' width='100' height='100'%3E%3Cpath d='M50 0 L55 45 L65 55 L50 100 M30 0 L35 20 L0 30 M70 0 L95 40 L100 10 M0 60 L45 65 L25 100 M100 50 L80 80 L100 100' stroke='%23ffffff' stroke-width='1' fill='none' stroke-opacity='0.2'/%3E%3C/pattern%3E%3C/defs%3E%3Crect width='100%25' height='100%25' fill='url(%23crack)'/%3E%3C/svg%3E")`,
                    backgroundSize: "cover",
                    mixBlendMode: isDark ? "overlay" : "multiply",
                  }}
                />
              </div>
            )}
          </div>

          {/* Shadow that follows the banner - more subtle on mobile */}
          <div
            className="absolute -z-10 left-1/2 bottom-0 w-full transform -translate-x-1/2 translate-y-1/2"
            style={{
              height: isMobile ? "6px" : "10px",
              background: `radial-gradient(ellipse at center, rgba(0,0,0,${shadowOpacity}) 0%, rgba(0,0,0,0) 80%)`,
              borderRadius: "50%",
              filter: `blur(${3 + exitProgress * 3}px)`,
              opacity:
                exitProgress < 0.7
                  ? 1
                  : Math.max(0, 1 - (exitProgress - 0.7) * 3),
              transform: `translateX(-50%) scaleX(${
                0.8 + exitProgress * 0.2
              }) scaleY(${0.4 + exitProgress * 0.2})`,
            }}
          ></div>
        </div>

        {/* Impact effect on navbar - subtler on mobile */}
        {exitProgress < 0.36 && exitProgress > 0.2 && (
          <div
            className="absolute top-0 left-0 right-0 h-1.5 md:h-2"
            style={{
              background: isDark
                ? `radial-gradient(ellipse at center, rgba(255,255,255,${Math.max(
                    0,
                    (isMobile ? 0.1 : 0.15) -
                      Math.abs(exitProgress - 0.28) * (isMobile ? 1.5 : 2)
                  )}) 0%, rgba(255,255,255,0) 70%)`
                : `radial-gradient(ellipse at center, rgba(0,0,0,${Math.max(
                    0,
                    (isMobile ? 0.07 : 0.1) -
                      Math.abs(exitProgress - 0.28) * (isMobile ? 1 : 1.5)
                  )}) 0%, rgba(0,0,0,0) 70%)`,
              opacity: Math.max(
                0,
                1 - Math.abs((exitProgress - 0.2) / 0.16 - 0.5) * 4
              ),
            }}
          ></div>
        )}
      </div>
    );
  };

export default EbookBanner;
